function vector gumbelDistribution(vector v) {
    return -log(-log(v));
}

// return 0 ~ 1
function vector selectedNoise(int noiseId; vector pos; float time; float flow) {
    int Random = 0,                 // random
        PerlinNoise =  1,           // noise
        OriginalPerlinNoise = 2,    // onoise
        SimplexNoise = 3,           // xnoise
        SparseConvolutionNoise = 4, // snoise
        FlowNoise = 5,              // flownoise
        CurlNoise = 6,              // curlnoise
        ArigatorNoise = 7,          // anoise
        WorleyNoise = 8,
        ManhattanDistWorleyNoise = 9,
        ChebyshevDistWorleyNoise = 10;

    if(Random == noiseId) {// 0 ~ 1
        return random(set(pos.x, pos.y, pos.z, time));
    }

    if(PerlinNoise == noiseId) { // 0 ~ 1
        return noise(set(pos.x, pos.y, pos.z, time));
    }

    if(OriginalPerlinNoise == noiseId) { // 0 ~ 1
        error("Error: OriginalPerlinNoise");
    }

    if(SimplexNoise == noiseId) { // 0 ~ 1
        return xnoise(set(pos.x, pos.y, pos.z, time));
    }

    if(SparseConvolutionNoise == noiseId) { // -1.7 ~ 1.7
        return snoise(pos);
    }

    if(FlowNoise == noiseId) { // 0 ~ 1 (0.2 ~ 0.8), args(p, flow(0 ~ 1))
        return flownoise(set(pos.x, pos.y, pos.z, time), flow);
    }

    if(CurlNoise == noiseId) { // -1 ~ 1.02
        return curlxnoise(set(pos.x, pos.y, pos.z, time));
    }

    if(ArigatorNoise == noiseId) { // anoise 0 ~ 1
        // return anoise(pos);
        vector4 p = set(pos.x, pos.y, pos.z, time);
        return anoise(pos,
            0,
            noise(p),
            noise(p)
        );
    }

    if(WorleyNoise == noiseId) {
        vector4 p = set(pos.x, pos.y, pos.z, time);
        int seed;
        float dist1, dist2, dist3, dist4;
        wnoise(p, seed, dist1, dist2, dist3, dist4);

        return set(dist1, dist2, dist3);
    }

    if(ManhattanDistWorleyNoise == noiseId) {
        vector4 p = set(pos.x, pos.y, pos.z, time);
        int seed;
        float dist1, dist2, dist3, dist4;
        mwnoise(p, seed, dist1, dist2, dist3, dist4);

        return set(dist1, dist2, dist3);
    }

    if(ChebyshevDistWorleyNoise == noiseId) {
        vector4 p = set(pos.x, pos.y, pos.z, time);
        int seed;
        float dist1, dist2, dist3, dist4;
        cwnoise(p, seed, dist1, dist2, dist3, dist4);

        return set(dist1, dist2, dist3);
    }

    error("Error: selected");
}

function vector fitTo01(int noiseId; vector vec) {
    int OriginalPerlinNoise = 2,    // onoise
        SparseConvolutionNoise = 4, // snoise
        CurlNoise = 6;              // curlnoise

    // -1 ~ 1
    if(OriginalPerlinNoise == noiseId) 
        return fit11(vec, {0,0,0}, {1,1,1});
    
    // -1.7 ~ 1.7
    if(SparseConvolutionNoise == noiseId) 
        return fit(vec, {-1.7, -1.7, -1.7}, {1.7, 1.7, 1.7}, {0,0,0}, {1,1,1});

    // -1 ~ 1.02
    if(CurlNoise == noiseId)
        return fit(vec, {-1, -1, -1}, {1.02, 1.02, 1.02}, {0,0,0}, {1,1,1});

    return vec; // 0 ~ 1
}

function vector sampling(int fbmId; vector v) {
    int Normal = 1,
        Cauchy = 2,
        Sphere_Uniform = 3,
        Orientation_Uniform = 4,
        GumbelDistribution = 5;

    int samplingId = chi("fbm" + itoa(fbmId) + "_SamplingID");

    if (samplingId == Normal) {
        vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
        return sample_normal(vec);
    }
    
    if (samplingId == Cauchy) {
        vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
        return sample_cauchy(vec);// -1 ~ 0 ~ 1
    }
    
    if (samplingId == Sphere_Uniform) {
        vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
        return sample_sphere_uniform(vec);
    }
    
    if (samplingId == Orientation_Uniform) {
        vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
        return sample_orientation_uniform(vec);
    }

    if (samplingId == GumbelDistribution) {
        vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
        return gumbelDistribution(vec);
    }

    error("ERROR: Sampling");
}

function vector fitTo11(int noiseId, samplingId; vector v) {
    int notSelectedSamplingId = 0;
    if(samplingId == notSelectedSamplingId) {
        int OriginalPerlinNoise = 2,    // onoise
            SparseConvolutionNoise = 4, // snoise
            CurlNoise = 6;              // curlnoise

        if(
            (OriginalPerlinNoise != noiseId) 
            && (SparseConvolutionNoise != noiseId)
            && (CurlNoise != noiseId)
        ) {
            return fit01(v, {-1,-1,-1}, {1,1,1});
        }
    }
}

function vector fbm(int octave;
                    int noiseId;
                    vector p;
                    vector sft;
                    float t;
                    float angle;
                    float flow) {
    vector pos = p;
    vector v = {0};
    vector a = {0.5, 0.5, 0.5};
    matrix mat = ident();
    // float radius = 3.1415;
    float time = t;
    // float scale = 2;
    vector shift = sft;

    for (int i = 0; i < octave; ++i) {
        v += a * selectedNoise(noiseId, pos, time, flow);

        //TODO: rotate parameter
        rotate(mat, radians(angle), {0,1,0});

        pos = mat * pos * {2,2,2} + shift;
        a *= 0.5;
        
    }

    return v / (1 - a);
}

function vector domainWarping(vector p; float time) {
    vector pos = p * chf("Scale");

    // FBM 1 ------------------------------------------
    vector fbm1 = fbm(
            chi("fbm1_Octave"),
            chi("fbm1_NoiseID"),
            pos,
            chv("fbm1_Shift"),
            time,
            chf("fbm1_Angle"),
            chf("fbm1_FlowNoise_Flow")
        );

    if (chi("fbm1_SamplingID") != 0) {
        fbm1 = sampling(1, fbm1);
    }
    
    fbm1 *= chv("fbm1_Scale") * chf("fbm1_Uniform_Scale");

    // return fbm1; //debug;

    // FBM 2 ------------------------------------------
    vector fbm2 = fbm(
            chi("fbm2_Octave"),
            chi("fbm2_NoiseID"),
            pos + fbm1,
            chv("fbm2_Shift"),
            time,
            chf("fbm2_Angle"),
            chf("fbm2_FlowNoise_Flow")
        );

    if (chi("fbm2_SamplingID") != 0) {
        fbm2 = sampling(2, fbm2);
    }

    fbm2 *= chv("fbm2_Scale") * chf("fbm2_Uniform_Scale");

    // FBM 3 ------------------------------------------
    vector fbm3 = fbm(
            chi("fbm3_Octave"),
            chi("fbm3_NoiseID"),
            pos * (chv("fbm3_Scale") * chf("fbm3_Uniform_Scale")) + fbm2,
            chv("fbm3_Shift"),
            time,
            chf("fbm3_Angle"),
            chf("fbm3_FlowNoise_Flow")
        );

    if (chi("fbm3_SamplingID") != 0) {
        fbm3 = sampling(3, fbm3);
    }

    if(chi("is_Fit_11")) {
       fbm3 = fitTo11(chi("fbm3_NoiseID"), chi("fbm3_SamplingID"), fbm3);
    }

    // fbm3 = fbm3 % 0.3;

    return fbm3;
}

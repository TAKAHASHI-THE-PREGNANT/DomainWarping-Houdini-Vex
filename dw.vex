// return 0 ~ 1
function vector selectedNoise(int noiseId; vector pos; float time; float flow) {
    int Random = 0,                 // random
        PerlinNoise =  1,           // noise
        OriginalPerlinNoise = 2,    // onoise
        SimplexNoise = 3,           // xnoise
        SparseConvolutionNoise = 4, // snoise
        FlowNoise = 5,              // flownoise
        CurlNoise = 6,              // curlnoise
        ArigatorNoise = 7;          // anoise

    if(Random == noiseId) // 0 ~ 1
        return random(set(pos.x, pos.y, pos.z, time));

    if(PerlinNoise == noiseId) // 0 ~ 1
        return noise(set(pos.x, pos.y, pos.z, time));

    if(OriginalPerlinNoise == noiseId) // -1 ~ 1
        return onoise(pos);

    if(SimplexNoise == noiseId) // 0 ~ 1
        return xnoise(set(pos.x, pos.y, pos.z, time));

    if(SparseConvolutionNoise == noiseId) // -1.7 ~ 1.7
        return snoise(pos);

    if(FlowNoise == noiseId) // 0 ~ 1 (0.2 ~ 0.8), args(p, flow(0 ~ 1))
        return flownoise(set(pos.x, pos.y, pos.z, time), flow);

    if(CurlNoise == noiseId) // -1 ~ 1.02
        return curlnoise(set(pos.x, pos.y, pos.z, time));

    if(ArigatorNoise == noiseId) // anoise 0 ~ 1
        return anoise(
                pos
            );

    return {0};
}

function vector fitTo01(int noiseId; vector vec) {
    int OriginalPerlinNoise = 2,    // onoise
        SparseConvolutionNoise = 4, // snoise
        CurlNoise = 6;              // curlnoise

    // -1 ~ 1
    if(OriginalPerlinNoise == noiseId) 
        return fit11(vec, {0,0,0}, {1,1,1});

    // -1 ~ 1.02
    if(CurlNoise == noiseId)
        return fit(vec, {-1, -1, -1}, {1.02, 1.02, 1.02}, {0,0,0}, {1,1,1});

    // -1.7 ~ 1.7
    if(SparseConvolutionNoise == noiseId) 
        return fit(vec, {-1.7, -1.7, -1.7}, {1.7, 1.7, 1.7}, {0,0,0}, {1,1,1});
    
    return vec;// 0 ~ 1
}

function vector sampling(int fbmId; vector v) {
    vector vec = fitTo01(chi("fbm" + itoa(fbmId) + "_NoiseID"), v);
    int samplingId = chi("fbm" + itoa(fbmId) + "_SamplingID");

    int None = 0,
        Normal = 1,
        Cauchy = 2,
        Sphere_Uniform = 3,
        Orientation_Uniform = 4;

    if (samplingId == Normal)
        return sample_normal(vec);
    
    if (samplingId == Cauchy)
        return sample_cauchy(vec);
    
    if (samplingId == Sphere_Uniform)
        return sample_sphere_uniform(vec);
    
    if (samplingId == Orientation_Uniform)
        return sample_orientation_uniform(vec);

    return v;
}

function vector fbm(int octave;
                    int noiseId;
                    vector p;
                    float sft; float shiftScale;
                    float radiusSccale;
                    float t;
                    float flow) {
    vector pos = p;
    vector v = {0};
    vector a = {0.5, 0.5, 0.5};
    matrix mat = ident();
    float radius = 0;
    float time = t;
    float shift = sft;

    for (int i = 0; i < octave; ++i) {
        v += a * selectedNoise(noiseId, pos, time, flow);

        rotate(mat, radius, normalize(v));

        pos = mat * pos * shift;

        radius +=  radiusSccale;
        time += .1;
        shift += shiftScale;
        a *= .5;
    }

    return v;
}

function vector domainWarping(vector p; float time) {
    vector pos = p;

    vector fbm1 = fbm(
            chi("fbm1_Octave"),
            chi("fbm1_NoiseID"),
            pos,
            chf("fbm1_Shift"),
            chf("fbm1_Shift_Scale"),
            chf("fbm1_Radius_Scale"),
            time * chf("fbm1_Time_Scale"),
            chf("fbm1_FlowNoise_Flow")
        );

    // return fbm1; //debug

    fbm1 = sampling(1, fbm1);

    vector fbm2 = fbm(
            chi("fbm2_Octave"),
            chi("fbm2_NoiseID"),
            pos + fbm1,
            chf("fbm2_Shift"),
            chf("fbm2_Shift_Scale"),
            chf("fbm2_Radius_Scale"),
            time * chf("fbm2_Time_Scale"),
            chf("fbm2_FlowNoise_Flow")
        );

    fbm2 = sampling(2, fbm2);


    vector fbm3 = fbm(
            chi("fbm3_Octave"),
            chi("fbm3_NoiseID"),
            pos + fbm2,
            chf("fbm3_Shift"),
            chf("fbm3_Shift_Scale"),
            chf("fbm3_Radius_Scale"),
            time * chf("fbm3_Time_Scale"),
            chf("fbm3_FlowNoise_Flow")
        );

    fbm3 = sampling(3, fbm3);

    return fbm3;
}
